{"version":3,"sources":["store/index.ts","api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TODOS_LOADING","USER_LOADING","SELECT_ID","getTodosSelector","state","todos","getSelectedUserByIdSelector","selectedUserById","initialState","user","store","createStore","action","type","id","composeWithDevTools","TODOS_API","USERS_API","getTodos","a","fetch","response","json","getUser","userId","TodoList","dispatch","useDispatch","selectedUserId","useSelector","className","map","title","completed","classNames","checked","readOnly","value","onClick","CurrentUser","useState","setUser","currentUserId","useEffect","newUser","currentUser","name","email","phone","App","dispstch","query","setQuery","statusTodo","setStatusTodo","getAll","all","filteredTodos","filter","toLowerCase","includes","showTodos","preparedTodo","onChange","event","target","placeholder","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a52f200f.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst TODOS_LOADING = 'TODOS_LOADING';\nconst USER_LOADING = 'USER_LOADING';\nconst SELECT_ID = 'SELECT_ID';\n\nexport const todosLoadingAction = (todos: Todo[]) => ({\n  type: TODOS_LOADING,\n  todos,\n});\nexport const userLoadingAction = (user: User) => ({\n  type: USER_LOADING,\n  user,\n});\nexport const idSelectAction = (id: number) => ({\n  type: SELECT_ID,\n  id,\n});\n\nexport const getTodosSelector = (state: RootState) => state.todos;\nexport const getSelectedUserByIdSelector\n = (state: RootState) => state.selectedUserById;\nexport const getCurrentUserSelector = (state: RootState) => state.user;\n\nexport type RootState = {\n  todos: Todo[];\n  selectedUserById: number;\n  user: User | null;\n};\n\nconst initialState: RootState = {\n  todos: [],\n  selectedUserById: 0,\n  user: null,\n};\n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case TODOS_LOADING:\n      return {\n        ...state,\n        todos: [...state.todos, ...action.todos],\n      };\n\n    case USER_LOADING:\n      return {\n        ...state,\n        user: action.user,\n      };\n\n    case SELECT_ID:\n      return {\n        ...state,\n        selectedUserById: action.id,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","const TODOS_API = 'https://mate.academy/students-api/todos';\nconst USERS_API = 'https://mate.academy/students-api/users';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(TODOS_API);\n  const todos = await response.json();\n\n  return todos;\n}\n\nexport async function getUser(userId: number): Promise<User> {\n  const response = await fetch(`${USERS_API}/${userId}`);\n  const user = await response.json();\n\n  return user;\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { getSelectedUserByIdSelector } from '../../store';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n}) => {\n  const dispatch = useDispatch();\n  const selectedUserId = useSelector(getSelectedUserByIdSelector);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {todos.map(({\n            userId,\n            title,\n            completed,\n            id,\n          }) => (\n            <li\n              key={id}\n              className={classNames(\n                'TodoList__item',\n                { 'TodoList__item--checked': completed },\n                { 'TodoList__item--unchecked': !completed },\n              )}\n            >\n              <label>\n                <input type=\"checkbox\" checked={completed} readOnly />\n                <p>{title}</p>\n              </label>\n              {userId && (\n                <button\n                  className={classNames(\n                    'TodoList__user-button', 'button',\n                    {\n                      'TodoList__user-button--selected': selectedUserId\n                     === userId,\n                    },\n                  )}\n                  type=\"button\"\n                  data-cy=\"userButton\"\n                  value={userId}\n                  onClick={() => dispatch({ type: 'SELECT_ID', id: userId })}\n                >\n                  {`User #${userId}`}\n                </button>\n              )}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getSelectedUserByIdSelector } from '../../store';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\nexport const CurrentUser: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useDispatch();\n  const currentUserId = useSelector(getSelectedUserByIdSelector);\n\n  useEffect(() => {\n    const newUser = async () => {\n      const currentUser = await getUser(currentUserId);\n\n      setUser(currentUser);\n    };\n\n    newUser();\n  }, [currentUserId]);\n\n  return (\n    <>\n      {user && (\n        <>\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                {`Selected user: ${user.id}`}\n              </span>\n            </h2>\n\n            <h3\n              className=\"CurrentUser__name\"\n              data-cy=\"userName\"\n            >\n              {user.name}\n            </h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n          </div>\n\n          <button\n            type=\"button\"\n            className=\"CurrentUser__clearButton\"\n            onClick={() => dispatch({ type: 'SELECT_ID', id: 0 })}\n          >\n            Clean User\n          </button>\n        </>\n      )}\n    </>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport React, { useEffect, useState } from 'react';\n\nimport {\n  getSelectedUserByIdSelector,\n  getTodosSelector,\n} from './store';\n\nimport './App.scss';\nimport './styles/general.scss';\nimport { getTodos } from './api';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\n\nexport const App: React.FC = () => {\n  const selectedUserId = useSelector(getSelectedUserByIdSelector);\n  const todos = useSelector(getTodosSelector);\n  const dispstch = useDispatch();\n  const [query, setQuery] = useState('');\n  const [statusTodo, setStatusTodo] = useState('All');\n\n  useEffect(() => {\n    const getAll = async () => {\n      const all = await getTodos();\n\n      dispstch({ type: 'TODOS_LOADING', todos: all });\n    };\n\n    getAll();\n  }, []);\n\n  const filteredTodos\n    = todos.filter(({ title }) => title.toLowerCase()\n      .includes(query.toLowerCase()));\n\n  const changeStatusTodo = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setStatusTodo(event.target.value);\n  };\n\n  const preparedTodo = () => {\n    switch (statusTodo) {\n      case 'All':\n        return filteredTodos;\n      case 'Completed':\n        return filteredTodos.filter(({ completed }) => completed);\n      case 'Active':\n        return filteredTodos.filter(({ completed }) => !completed);\n\n      default:\n        return filteredTodos;\n    }\n  };\n\n  const showTodos = preparedTodo();\n\n  return (\n    <div className=\"App\">\n\n      <div className=\"App__sidebar\">\n        <form className=\"App__form\">\n          <p>Select Todos</p>\n          <input\n            onChange={(event) => setQuery(event.target.value)}\n            value={query}\n            type=\"text\"\n            id=\"search-query\"\n            className=\"App__input\"\n            placeholder=\"Type key-word\"\n            data-cy=\"filterByTitle\"\n          />\n\n          <select\n            name=\"todoFilter\"\n            value={statusTodo}\n            className=\"App__select\"\n            onChange={changeStatusTodo}\n          >\n            <option>All</option>\n            <option>Completed</option>\n            <option>Active</option>\n          </select>\n        </form>\n\n        <TodoList\n          todos={showTodos}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}